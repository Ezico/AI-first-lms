// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  enrollments   Enrollment[]
  notes         Note[]
  certificates  Certificate[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  level       String
  duration    String
  price       Float
  instructor  String
  instructorTitle String
  instructorImage String?
  image       String?
  category    String // Stored as JSON array
  topics      String // Stored as JSON array
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modules     Module[]
  enrollments Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  type      String // "video", "document", "quiz"
  content   String?
  duration  String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  progress  Progress[]
  notes     Note[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  completedAt DateTime?

  progress  Progress[]

  @@unique([userId, courseId])
}

model Progress {
  id          String   @id @default(cuid())
  enrollmentId String
  enrollment  Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed   Boolean  @default(false)
  progress    Int      @default(0) // 0-100
  lastAccessed DateTime @default(now())

  @@unique([enrollmentId, lessonId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueDate DateTime @default(now())
  image     String?
}
